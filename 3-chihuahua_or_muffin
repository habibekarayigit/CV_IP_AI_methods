from google.colab import drive
drive.mount('/content/drive')

#Aşağıdaki adres benim görsellerin olduğu yer siz kendi yerinize göre adresi belirleyin
ls '/content/drive/My Drive/Colab Notebooks/dog_muffin'
dataset = "/content/drive/My Drive/Colab Notebooks/dog_muffin/"

#görsellerimiz yerinde mi ve kaç tane görsel mevcut
chihuahua_directory = '/content/drive/My Drive/Colab Notebooks/dog_muffin/chihuahua'
muffin_directory = '/content/drive/My Drive/Colab Notebooks/dog_muffin/muffin'

chihuahua_images  = os.path.join(chihuahua_directory)
muffin_images = os.path.join(muffin_directory)

print("Number of Chihuahua images: ", len(os.listdir(chihuahua_images)))
print("Number of Muffin Images: ", len(os.listdir(muffin_images)))

chihuahua_files = os.listdir(chihuahua_images)
muffin_files = os.listdir(muffin_images)

# görseller yerinde 
# Number of Chihuahua images:  900
# Number of Muffin Images:  500

#veri arttırma yapıyoruz :)
train_datagen = ImageDataGenerator(
    rescale = 1./255,
    width_shift_range=0.2,
    height_shift_range=0.2,
    rotation_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

train_generator = train_datagen.flow_from_directory(
    dataset,
    target_size=(150,150),
    class_mode='binary'
)

#CNN modelimizi oluşturalım
model = tf.keras.Sequential([
    
    #1st Conv2D Layer
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150,150,3)),
    tf.keras.layers.MaxPooling2D(2,2),
    
    #2nd Conv2D Layer
    
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.summary()
#epochs değeri değişebilir ben 2 yaptım ama 20-25 yada daha fazla yapabilirsiniz yada early stopping eklenebilir
from tensorflow.keras.optimizers import RMSprop

#opt = RMSprop(lr=0.0001, decay=1e-6)
opt = tf.keras.optimizers.legacy.RMSprop(learning_rate=0.0001,decay=1e-6)

model.compile(loss='binary_crossentropy', optimizer=opt, metrics=['acc'])

history = model.fit_generator(
    train_generator,
    epochs=2,
    verbose=1
)

#şimdi deneyelim modelimiz nasıl sonuç verecek? Örneğin chihuahua_900.JPG görselim gerçekten bir köpek olarak mı yoksa muffin olarak mı algılayacak?
import numpy as np
from keras.preprocessing import image

predict = ['Chihuahua', 'Muffin']

img = image.load_img('/content/drive/My Drive/Colab Notebooks/dog_muffin/chihuahua/chihuahua_900.JPG', target_size=(150, 150))
x = image.img_to_array(img)
x = np.expand_dims(x, axis=0)

images = np.vstack([x])
classes = model.predict(images)
predicted_class_index = np.argmax(classes)  # En yüksek olasılığa sahip sınıfın indeksi

predicted_class = predict[predicted_class_index]  # Tahmin edilen sınıf adı
print(predicted_class)
#sonuç: 1/1 [==============================] - 0s 35ms/step
#Chihuahua

#modelimiz güzel çalışıyor.
