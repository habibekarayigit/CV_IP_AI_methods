#Otomatik Trafik İhlali Algılama Sistemi

#CamVid: Kamera görüntüleriyle etiketlenmiş trafik sahnelerini içeren bir veri kümesidir. Bu porjede bu veri kümesinden faydalanacacağız.
#Website: http://mi.eng.cam.ac.uk/research/projects/VideoRec/CamVid/

# Veri setini indirme
!wget "http://mi.eng.cam.ac.uk/research/projects/VideoRec/CamVid/camvid.tar.gz"

# İndirilen dosyayı çıkartma
!tar -xf camvid.tar.gz

!pip install tensorflow
!pip install opencv-python

import os
import cv2
import numpy as np

data_path = "CamVid"
image_path = os.path.join(data_path, "images")
label_path = os.path.join(data_path, "labels")

image_files = sorted([os.path.join(image_path, filename) for filename in os.listdir(image_path)])
label_files = sorted([os.path.join(label_path, filename) for filename in os.listdir(label_path)])

# Veri setini yüklemek ve önişlemek için gerekli fonksiyonlar
def load_images(image_files):
    images = [cv2.imread(file) for file in image_files]
    images = [cv2.resize(image, (224, 224)) for image in images]  # Görüntü boyutunu ölçekleme
    images = [image / 255.0 for image in images]  # Görüntüleri [0, 1] aralığına ölçekleme
    return np.array(images)

def load_labels(label_files):
    labels = [cv2.imread(file, cv2.IMREAD_GRAYSCALE) for file in label_files]
    labels = [cv2.resize(label, (224, 224)) for label in labels]  # Etiket boyutunu ölçekleme
    labels = [label / 255.0 for label in labels]  # Etiketleri [0, 1] aralığına ölçekleme
    return np.array(labels)

# Veri setini yükleme
images = load_images(image_files)
labels = load_labels(label_files)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, UpSampling2D, BatchNormalization

# Modeli oluşturma
model = Sequential()
model.add(Conv2D(64, (3, 3), activation="relu", padding="same", input_shape=(224, 224, 3)))
model.add(MaxPooling2D((2, 2), padding="same"))
model.add(Conv2D(128, (3, 3), activation="relu", padding="same"))
model.add(MaxPooling2D((2, 2), padding="same"))
model.add(Conv2D(256, (3, 3), activation="relu", padding="same"))
model.add(UpSampling2D((2, 2)))
model.add(Conv2D(128, (3, 3), activation="relu", padding="same"))
model.add(UpSampling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation="relu", padding="same"))
model.add(Conv2D(32, (3, 3), activation="relu", padding="same"))
model.add(Conv2D(1, (3, 3), activation="sigmoid", padding="same"))

# Modeli derleme
model.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])

# Modeli eğitme
model.fit(images, labels, batch_size=16, epochs=10)

